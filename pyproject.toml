[build-system]
requires = ["setuptools"]
build-backend = "setuptools.build_meta"

[project]
name = "ptl"
description = "pip-tools, layered"
readme = "README.md"
license = {text = "MIT"}
authors = [{name = "Dmitry Meyer", email = "me@undef.im"}]
classifiers = [
    "Development Status :: 4 - Beta",
    "License :: OSI Approved :: MIT License",
    "Operating System :: POSIX :: Linux",
    "Intended Audience :: Developers",
    "Topic :: Utilities",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]
requires-python = ">=3.8"
dynamic = ["version"]

[project.urls]
Homepage = "https://github.com/un-def/ptl"
Repository = "https://github.com/un-def/ptl.git"
Changelog = "https://github.com/un-def/ptl/blob/master/CHANGELOG.md"
Issues = "https://github.com/un-def/ptl/issues"

[project.scripts]
ptl = "ptl.cli:main"

[tool.setuptools.dynamic]
version = {attr = "ptl.__version__"}

[tool.setuptools]
zip-safe = true
include-package-data = false

[tool.ruff]
preview = true
src = ["src"]
line-length = 79

[tool.ruff.lint]
select = ["F", "E"]

[tool.isort]
lines_after_imports = 2
multi_line_output = 5
include_trailing_comma = true
use_parentheses = true
sections = ["FUTURE", "STDLIB", "THIRDPARTY", "FIRSTPARTY", "TESTS", "LOCALFOLDER"]
known_tests = ["tests"]

[tool.mypy]
mypy_path = "${MYPY_CONFIG_FILE_DIR}/src"
packages = ["ptl", "tests"]
python_version = "3.8"   # the lowest Python version we support
disallow_any_unimported = true
disallow_any_explicit = true
disallow_any_generics = true
disallow_subclassing_any = true
disallow_untyped_calls = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_return_any = true
warn_unreachable = true
implicit_reexport = false
strict_equality = true
warn_incomplete_stub = true
extra_checks = true
warn_unused_configs = true

[tool.pyright]
include = ["src/**", "tests/**"]
pythonVersion = "3.8"   # the lowest Python version we support
typeCheckingMode = "strict"
reportMissingTypeStubs = "warning"
reportUnusedImport = "error"
reportUnusedClass = "error"
reportUnusedFunction = "error"
reportUnusedVariable = "error"
reportUnusedExpression = "error"
reportUnusedExcept = "error"
reportDuplicateImport = "error"
reportUnknownArgumentType = "error"
reportUnknownLambdaType = "error"
reportUnknownMemberType = "error"
reportUnknownParameterType = "error"
reportUnknownVariableType = "error"
reportMissingTypeArgument = "error"
reportUnnecessaryCast = "error"
reportUnnecessaryIsInstance = "error"
reportUnnecessaryComparison = "error"
reportUnnecessaryContains = "error"

[tool.pytest.ini_options]
addopts = ["--strict-markers"]
testpaths = ["tests"]
filterwarnings = ["error"]

[tool.coverage.run]
source = ["ptl", "tests"]
omit = ["__main__.py"]
relative_files = true

[tool.coverage.report]
exclude_also = ["assert False"]

[tool.tox]
legacy_tox_ini = """
    [tox]
    env_list = py{38,39,310,311,312}, lint, type

    [testenv]
    description = run tests
    deps = -r requirements/test.requirements.in
    commands = pytest {posargs}

    # for CI -- `tox run -e test`
    [testenv:test]

    [testenv:lint]
    description = run linters
    skip_install = true
    deps = -r requirements/lint.requirements.in
    commands =
        ruff check
        isort -c .

    [testenv:type]
    description = run type checkers
    skip_install = true
    deps =
        -r requirements/type.requirements.in
        # for stubs
        -r requirements/test.requirements.in
    commands =
        mypy
        pyright
"""

[tool.uv.pip]
generate-hashes = true
no-header = true

[tool.pip-tools.compile]
generate-hashes = true
no-header = true
strip-extras = true
allow-unsafe = true
resolver = "backtracking"
